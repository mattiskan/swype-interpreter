		File[] dir = new File("files").listFiles();
		int passCount = 0;
		int failCount = 0;
		double correctness = 0;
		int correctCount = 0;
		Interpreter inter = new Interpreter("files/ordlista-stor.txt");
		for(File file : dir){
			//System.out.println("\n"+file.getPath());
			Map<Double, String> result = inter.Interpret(file, false);

			String realWord = inter.data.getWord();
			
			double realWordValue = -1;
			double failWordValue = -1;

			String failWord = null;
			http://mattiskan.se
			for (Map.Entry<Double, String> entry : result.entrySet()) {
				//System.out.println(entry.getValue()+" "+entry.getKey());
				
				if (entry.getValue().equals(realWord)) {
					realWordValue = entry.getKey();
				} else if(failWord==null) {
					failWord = entry.getValue();
					failWordValue = entry.getKey();
				}
				if (realWordValue != NOT_FOUND  && failWordValue != NOT_FOUND){
					break;
				}
			}
			
			if(realWordValue == NOT_FOUND && !inter.trie.checkWord(realWord)){
				continue;
			}
			
			
			if (realWordValue != NOT_FOUND  && failWordValue != NOT_FOUND) {
				double kvot = realWordValue/failWordValue;
				correctness += kvot;
				correctCount++;
				System.out.printf("%-25s %2.5f   %s\n", realWord+":", kvot, (kvot<1)?"PASS": "FAILED: "+ failWord);
				if (kvot<1)
					passCount++;
				else
					failCount++;
			} else if (realWordValue == NOT_FOUND  && failWordValue == NOT_FOUND) {
				System.out.printf("%-25s%11s%s\n", realWord+":", "",  "FAILED: not found");
				failCount++;
			} else if (realWordValue == NOT_FOUND) {
				System.out.printf("%-25s%11s%s%s\n", realWord+":","",  "FAILED:", failWord);
				failCount++;
			} else {
				System.out.printf("%-25s%11s%s\n", realWord+":", "", "PASS");
				passCount++;
			}
		}
		System.out.printf("pass/fail: %s/%s total: %s, comparsion: %f, correctness: %f\n",passCount, failCount, passCount+failCount, passCount/(double)(passCount+failCount), correctness/correctCount);
	
